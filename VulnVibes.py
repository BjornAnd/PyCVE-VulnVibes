import tkinter as tk
from tkinter import messagebox
import requests
import matplotlib.pyplot as plt
import sys

##################################################
# This script is a simple GUI application that
# fetches and displays EPSS scores for a given CVE
# identifier using the First API.
# The user can enter a CVE identifier in the input
# field and click the button to fetch and display
# the EPSS scores.
# Read more about EPSS scores here:
# https://www.first.org/epss/model
# 
# Syntax: python VulnVibes.py <CVE-identifier>
# By default, the input field is empty unless the
# CVE identifier is passed as a command-line argument.
# 
# Written by: BjÃ¶rn Andersson
# GitHub repository: https://github.com/BjornAnd/PyCVE-VulnVibes
# version: 0.8
##################################################

# Function to be called when the button is pressed
def on_button_click():
    user_input = entry.get()
    if user_input:
        user_input = user_input.strip()  # Remove leading/trailing whitespaces
    else:
        user_input = "CVE-2024-6670"  # Hardcoded for testing, used if no CVE is entered in the input field

    if user_input:
        api_url = f"https://api.first.org/data/v1/epss?cve={user_input}&scope=time-series"        
        try:
            response = requests.get(api_url)
            response.raise_for_status()  # Raise an error for bad status codes
            data = response.json()
            
            # Extract main data
            main_data = data['data'][0]
            main_date = main_data['date']
            main_epss = float(main_data['epss'])
            
            # Extract time-series data
            time_series = main_data['time-series']
            time_series_dates = [item['date'] for item in time_series]
            time_series_epss_scores = [float(item['epss']) for item in time_series]
            
            # Combine main data and time-series data
            dates = [main_date] + time_series_dates
            epss_scores = [main_epss] + time_series_epss_scores
            
            # Plot the data
            plt.figure(figsize=(7, 5))
            plt.xlabel('Date')
            plt.ylabel('EPSS Score')
            plt.ylim(0, 1)
            plt.yticks([i * 0.1 for i in range(11)])  # Set Y-axis ticks from 0 to 1 at intervals of 0.1
            plt.axhline(0, color='black', linewidth=0.5)  # Add a horizontal line at Y=0
            plt.title(f'EPSS Scores for {user_input}')
            plt.grid(True)
            plt.xticks(rotation=90)
            plt.gca().invert_xaxis()  # Invert the X-axis
            plt.tight_layout()
            plt.plot(dates, epss_scores, marker='o')
            plt.show()
            
        except requests.exceptions.RequestException as e:
            messagebox.showerror("Error", f"API request failed: {e}")
    else:
        messagebox.showwarning("Input Error", "Please enter a CVE identifier.")


# Create the main application window
root = tk.Tk()
root.title("VulnVibes")

# Set the window size
root.geometry("400x150")

# Create an input field
entry = tk.Entry(root)
entry.pack(pady=10)

# Check for command-line arguments
if len(sys.argv) > 1:
    entry.insert(0, sys.argv[1])

# Create a button
button = tk.Button(root, text="Enter CVE (format: 'CVE-YYYY-#')", command=on_button_click)
button.pack(pady=10)

# Run the main event loop
root.mainloop()